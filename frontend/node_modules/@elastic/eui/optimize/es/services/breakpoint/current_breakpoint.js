import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import React, { createContext, useState, useEffect } from 'react';
import { useEuiTheme } from '../theme';
import { throttle } from '../throttle';
import { getBreakpoint } from './breakpoint';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var CurrentEuiBreakpointContext = /*#__PURE__*/createContext(undefined);
/**
 * Top level provider (nested within EuiProvider) which provides a single
 * resize listener that returns the current breakpoint based on window width
 */

export var CurrentEuiBreakpointProvider = function CurrentEuiBreakpointProvider(_ref) {
  var children = _ref.children;

  var _useEuiTheme = useEuiTheme(),
      breakpoints = _useEuiTheme.euiTheme.breakpoint;

  var _useState = useState(typeof window !== 'undefined' ? getBreakpoint(window.innerWidth, breakpoints) : undefined),
      _useState2 = _slicedToArray(_useState, 2),
      currentBreakpoint = _useState2[0],
      setCurrentBreakpoint = _useState2[1];

  useEffect(function () {
    var onWindowResize = throttle(function () {
      setCurrentBreakpoint(getBreakpoint(window.innerWidth, breakpoints));
    }, 50);
    window.addEventListener('resize', onWindowResize);
    return function () {
      return window.removeEventListener('resize', onWindowResize);
    };
  }, [breakpoints]);
  return ___EmotionJSX(CurrentEuiBreakpointContext.Provider, {
    value: currentBreakpoint
  }, children);
};